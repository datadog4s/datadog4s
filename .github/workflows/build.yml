name: Build

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**'
jobs:
  build:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        java: ['11', '17']
        scala: ['2.12.10']
    steps:
    - name: Debug info
      run: echo ref:${{github.ref}}
    - uses: actions/checkout@v4
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
    - name: Setup sbt launcher
      uses: sbt/setup-sbt@v1    
    - uses: coursier/cache-action@v6
      with:
        extraKey: scala-${{ matrix.scala }}
    - name: Compile & Test
      run: sbt checkAll
#    - name: Codecov report
#      if: ${{matrix.java}} == '11.0.x'
#      uses: codecov/codecov-action@v1
#      with:
#        token: ${{secrets.CODECOV_TOKEN}}     
  publish:
    timeout-minutes: 30
    if: github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/v' )
    needs: [build]
    runs-on: [ubuntu-latest]
    steps:
    - name: Debug info
      run: echo ref:${{github.ref}}
    - uses: actions/checkout@v4
    - run: git fetch --tags -f --unshallow
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    - name: Setup sbt launcher
      uses: sbt/setup-sbt@v1
    - uses: coursier/cache-action@v6
      with:
        extraKey: scala-${{ matrix.scala }}
    - name: Compile & Test
      run: sbt checkAll
#    - name: Run binary compatiblity check
#      if: contains(github.ref, 'refs/tags/v') && !endsWith(github.ref, '.0')
#      run: sbt mimaReportBinaryIssues
    - name: Git check dirty state
      run: |
        if [[ $(git diff --stat) != '' ]]; then
          echo 'dirty'
          git status
          exit 0
        fi
    - name: Release
      env:
        PGP_SECRET: ${{ secrets.PGP_SECRET }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSPHRASE }}
      run: sbt ci-release
    - name: Release Drafter
      uses: release-drafter/release-drafter@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems
        restore-keys: |
          ${{ runner.os }}-gems
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
    - name: Install jekyll
      run: |
        export GEM_HOME=$PWD/vendor/bundle
        gem install jekyll -v 4.3.4
    - name: Publish microsite
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        DEPLOY_KEY_PASSPHRASE: ${{secrets.DEPLOY_KEY_PASSPHRASE}}
        GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
      run: |
        export PATH="$PWD/vendor/bundle/bin:$PATH"
        export GEM_HOME=$PWD/vendor/bundle
        eval "$(ssh-agent -s)"
        ssh-add - <<< "${DEPLOY_KEY}"
        git config --global user.email "datadog4s-bot@github.com"
        git config --global user.name "Release bot"
        sbt site/publishMicrosite
